{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolist-reduser.ts","state/tasks-reduser.ts","AppWithReduxs.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","helperText","label","variant","size","value","onChange","e","currentTarget","onKeyPress","charCode","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","TodoList","useSelector","state","todolists","find","todo","id","changeTodoListTitle","removeTodoList","Delete","style","listStyle","paddingLeft","tasks","map","task","key","className","isDone","Checkbox","newIsDoneStatus","checked","changeStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","initialState","AppWithRedux","v1","TodoLists","dispatch","useDispatch","todoListId","type","action","newTitle","taskId","todoListID","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","marginLeft","Grid","container","padding","todolistID","AddTodoListAC","spacing","tl","tasksForToDoList","t","item","Paper","elevation","rootReducer","combineReducers","copyState","todoListTasks","newTask","newTodoListTasks","newTodoList","todoList","todoListfiltered","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8bee8327.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState<string>('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    };\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Titile is required')\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                error={!!error}\r\n                helperText={error}\r\n                label={'Title'}\r\n                variant={'standard'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n\r\n            <IconButton size={'medium'} color={'primary'} onClick={addTask}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string,\r\n    changeValue?: (value: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false);\r\n        if (title !== '') {\r\n            if (props.changeValue) {\r\n                props.changeValue(title)\r\n            }\r\n        } else {\r\n            setTitle(props.value)\r\n        }\r\n\r\n    };\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            size={'small'}\r\n            value={title}\r\n            onBlur={deActivatedEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeTitle}\r\n        />\r\n        :\r\n    <span onDoubleClick={activatedEditMode}>{props.value}</span>;\r\n\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {filterValueType, TaskType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TodoListType} from './AppWithReduxs';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (value: filterValueType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (id: string, title: string, todoListId: string) => void\r\n    filter: filterValueType\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, newTitle: string) => void\r\n}\r\n\r\n\r\n\r\nfunction TodoList(props: PropsType) {\r\n\r\n    let todolst = useSelector<AppRootStateType, TodoListType | undefined>(state => state.todolists.find(todo => {\r\n        return todo && todo.id === props.id\r\n    }))\r\n\r\n    const changetodoListTitle = (title: string) => {\r\n        props.changeTodoListTitle(props.id, title)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter('all', props.id)\r\n    };\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter('active', props.id)\r\n    };\r\n    const onComplitedClickHandler = () => {\r\n        props.changeFilter('completed', props.id)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={props.title} changeValue={changetodoListTitle}/>\r\n                <IconButton size={'small'} onClick={() => {\r\n                    props.removeTodoList(props.id)\r\n                }}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                {/*<button onClick={() => {props.removeTodoList(props.id)}} > X </button>*/}\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: '0px'}}>\r\n                {\r\n                    props.tasks.map(task => {\r\n\r\n                        const removeTask = () => {\r\n                            props.removeTask(task.id, props.id)\r\n                        }\r\n                        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            let newIsDoneStatus = e.currentTarget.checked;\r\n                            props.changeStatus(task.id, newIsDoneStatus, props.id)\r\n                        }\r\n\r\n                        const changeTaskTitle = (title: string) => {\r\n                            props.changeTaskTitle(task.id, title, props.id)\r\n                        }\r\n\r\n                        return (\r\n                            <li key={task.id} className={task.isDone ? 'isDone' : ''}>\r\n                                <Checkbox color={'primary'}\r\n                                          onChange={changeStatus}\r\n                                          checked={task.isDone}\r\n                                />\r\n                                <EditableSpan\r\n                                    changeValue={changeTaskTitle}\r\n                                    value={task.title}\r\n                                />\r\n                                <IconButton size={'small'} onClick={removeTask}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                                {/*<button onClick={removeTask}>x</button>*/}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                        color={props.filter === 'all' ? 'primary' : 'default'}\r\n                        size={'small'}\r\n                        // className={props.filter === 'all' ? 'active_filter' : ''}\r\n                        onClick={onAllClickHandler}>All</Button>\r\n\r\n                <Button variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                        color={props.filter === 'active' ? 'primary' : 'default'}\r\n                        size={'small'}\r\n                        // className={props.filter === 'active' ? 'active_filter' : ''}\r\n                        onClick={onActiveClickHandler}>Active</Button>\r\n\r\n                <Button variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                        color={props.filter === 'completed' ? 'primary' : 'default'}\r\n                        size={'small'}\r\n                        // className={props.filter === 'completed' ? 'active_filter' : ''}\r\n                        onClick={onComplitedClickHandler}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import {filterValueType, TodoListType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\ntype ActionType = RemoveTodoListAction | addTodoListAction | ChangeTodoListTitleAction | ChangeTodoLisFilterAction\r\n\r\nexport type RemoveTodoListAction = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type addTodoListAction = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string;\r\n    todolistID: string\r\n}\r\nexport type ChangeTodoListTitleAction = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeTodoLisFilterAction = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: filterValueType\r\n    id: string\r\n}\r\n\r\nlet initialState: Array<TodoListType> = []\r\n\r\n// export type initialStateType = typeof initialState;\r\n\r\n\r\nexport const todoListReducer = (state: Array<TodoListType> = initialState, action: ActionType):Array<TodoListType>  => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id);\r\n        case 'ADD-TODOLIST':\r\n            let newTodoList: TodoListType = {\r\n                id: action.todolistID,\r\n                filter: 'all',\r\n                title: action.title\r\n            }\r\n            return [...state, newTodoList]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            const todoList = state.find(tl => tl.id === action.id)\r\n            if (todoList) {\r\n                todoList.title = action.title;\r\n                return [...state]\r\n            }\r\n            return state\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todoListfiltered = state.find(tl => tl.id === action.id)\r\n            if (todoListfiltered) {\r\n                todoListfiltered.filter = action.filter\r\n                return [...state]\r\n            }\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC = (todoListID: string): RemoveTodoListAction => {\r\n  return   {type: 'REMOVE-TODOLIST', id : todoListID}\r\n}\r\n\r\nexport const AddTodoListAC = (title: string): addTodoListAction => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistID: v1()}\r\n}\r\n\r\nexport const ChangeTodoListTitleAC = (title: string, id: string):ChangeTodoListTitleAction => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title , id: id }\r\n}\r\n\r\nexport const ChangeTodoLisFilterAC = (filter: filterValueType, id: string): ChangeTodoLisFilterAction => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', filter, id: id }\r\n}","import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {addTodoListAction, RemoveTodoListAction} from './todolist-reduser';\r\n\r\ntype ActionType = RemoveTaskAction | addTaskAction | changeTaskStatusType | changeTaskTitleType | addTasksType | addTodoListAction | RemoveTodoListAction\r\n\r\nexport type RemoveTaskAction = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todoListID: string\r\n}\r\nexport type addTaskAction = {\r\n    type: 'ADD-TASK'\r\n    title: string;\r\n    todoListID: string\r\n}\r\nexport type changeTaskStatusType = {\r\n    type: 'CHANGE-TASKS-STATUS'\r\n    id: string\r\n    isDone: boolean\r\n    todoListID: string\r\n}\r\n\r\nexport type changeTaskTitleType = {\r\n    type: 'CHANGE-TASKS-TITLE'\r\n    id: string\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\nexport type addTasksType = {\r\n    type: 'ADD_TASKS'\r\n}\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            let todoListTasks = copyState[action.todoListID]\r\n            copyState[action.todoListID] = todoListTasks.filter(t => t.id !== action.id)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            let copyState = {...state}\r\n            let todoListTasks = copyState[action.todoListID]\r\n            let newTodoListTasks = [newTask, ...todoListTasks]\r\n            return {...copyState, [action.todoListID]: newTodoListTasks}\r\n        }\r\n        case 'CHANGE-TASKS-STATUS': {\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => {\r\n                        if (t.id !== action.id) {\r\n                            return t\r\n                        } else {\r\n                            return {...t, isDone: action.isDone}\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n        case 'CHANGE-TASKS-TITLE':{\r\n            return {\r\n                ...state, [action.todoListID]: state[action.todoListID]\r\n                    .map(t => {\r\n                        if (t.id !== action.id) {\r\n                            return t\r\n                        } else {\r\n                            return {...t, title: action.title}\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST':{\r\n            return {\r\n                ...state, [action.todolistID]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST':{\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (id: string, todoListID: string): RemoveTaskAction => {\r\n    return {type: 'REMOVE-TASK', todoListID: todoListID, id: id}\r\n}\r\n\r\nexport const addTaskAC = (title: string, todoListID: string): addTaskAction => {\r\n    return {type: 'ADD-TASK', title: title, todoListID: todoListID}\r\n}\r\n\r\nexport const changeTaskStatusAC = (id: string, isDone: boolean, todoListID: string): changeTaskStatusType => {\r\n    return {type: 'CHANGE-TASKS-STATUS', id, isDone, todoListID}\r\n}\r\n\r\nexport const changeTaskTitleAC = (id: string, title: string, todoListID: string): changeTaskTitleType => {\r\n    return {type: 'CHANGE-TASKS-TITLE', id, title, todoListID}\r\n}\r\n\r\nexport const addTasksAC = (): addTasksType => {\r\n    return {type: 'ADD_TASKS'}\r\n}","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Typography, Toolbar, Container, Grid, Paper} from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoLisFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    RemoveTodoListAC,\r\n    todoListReducer\r\n} from './state/todolist-reduser';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reduser';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: filterValueType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type filterValueType = 'all' | 'active' | 'completed';\r\n\r\nfunction AppWithRedux() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let TodoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n\r\n    let tasks = useSelector<AppRootStateType,TasksStateType >(state => state.tasks)\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    function addToDoList(title: string) {\r\n        const action =  AddTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeFilter(value: filterValueType, todoListId: string) {\r\n        dispatch(ChangeTodoLisFilterAC(value, todoListId))\r\n    }\r\n\r\n    function removeTodoList(todoListId: string) {\r\n        const action =  RemoveTodoListAC(todoListId)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTodoListTitle(todoListId: string, newTitle: string) {\r\n        dispatch(ChangeTodoListTitleAC(newTitle,todoListId ))\r\n    }\r\n\r\n    function removeTask(taskId: string, todoListId: string) {\r\n        dispatch(removeTaskAC(taskId, todoListId))\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        dispatch(addTaskAC(title,todoListId ))\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todoListId: string) {\r\n        dispatch(changeTaskStatusAC(id, isDone, todoListId))\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todoListId: string) {\r\n        dispatch(changeTaskTitleAC(id, title, todoListId))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\" >\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed style={{marginLeft: '5px'}}>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        TodoLists.map(tl => {\r\n                            let tasksForToDoList = tasks[tl.id];\r\n                            if (tl.filter === 'active') {\r\n                                tasksForToDoList = tasksForToDoList.filter(t => !t.isDone)\r\n                            }\r\n                            if (tl.filter === 'completed') {\r\n                                tasksForToDoList = tasksForToDoList.filter(t => t.isDone)\r\n                            }\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper style={{padding: '10px'}} elevation={3}>\r\n                                    <TodoList\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        changeFilter={changeFilter}\r\n                                        tasks={tasksForToDoList}\r\n                                        removeTask={removeTask}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from './tasks-reduser';\r\nimport {todoListReducer} from './todolist-reduser';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithReduxs';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}